@page "/location"
@using System.Net.Http.Json;
@using WineWeb.Shared.Models.Locations;
@inject HttpClient Http
@inject PreloadService loading
@inject ToastService toastService

<PageTitle>LocationManagement</PageTitle>

<h3> LocationManagement</h3>

<Button Type="ButtonType.Link" Color="ButtonColor.Success" Outline="true" To="/Location/detail"> Add </Button>

<table class="table">
    <thead>
        <tr>
            <th>Code</th>
            <th>Full Name</th>
            <th>CreateDate</th>
            <th>UpdateDate</th>
        </tr>
    </thead>
    <tbody>
        @if (@Locationss == null)
        {
            <tr>
                <td colspan="8" align="center">No Data Found</td>
            </tr>
        }
        else
        {
            @foreach (var user in @Locationss)
            {
                <tr>
                    <td width="5%">@user.Code</td>
                    <td width="25%">@user.Name</td>
                    <td width="15%">@user.CreateDate?.ToShortDateString()</td>
                    <td width="10%">@user.UpdateDate?.ToShortDateString()</td>
                    <td width="10%">
                        <div>
                            <Button Type="ButtonType.Link" Color="ButtonColor.Success" Outline="true" To="@($"/Location/detail/{user.Id}")" Model="@user"> Edit </Button>
                            <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" Model="@modal"
                            @onclick="()=>{ TargetId=user.Id;modal.OnShowModalClick();}">
                                Delete
                            </Button>
                        </div>

                    </td>
                </tr>
            }
            <Pagination ActivePageNumber="@PageNumber"
                        TotalPages="@TotalPage"
                        PageChanged="FetchLocations" />
        }
    </tbody>
</table>
<ConfirmDelete Message="Do you comfirmed?" Url="@($"/api/Location/{TargetId}")" CusFunc="User" @ref="modal" />

@code {
    private LocationModel[]? Locationss;

    public int PageNumber { get; set; } = 1;
    public int PageSize { get; set; } = 10;
    public int TotalPage { get; set; }

    public int TargetId { get; set; }

    private ConfirmDelete modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchLocations();
    }

    private async Task FetchLocations()
    {
        loading.Show(SpinnerColor.Dark);
        var url = "/api/Locations";

        url = $"{url}?PageSize={PageSize}&PageNumber={PageNumber}";
        var result = await Http.GetFromJsonAsync<Response<LocationModel[]>>(url);
        Locationss = result?.Data;

        loading.Hide();
    }

}