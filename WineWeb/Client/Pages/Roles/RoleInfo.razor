@page "/Role/detail"
@page "/Role/detail/{RoleId:int}"
@using System.Net.Http.Json;
@using WineWeb.Shared.Entities;
@inject HttpClient Http
@inject ToastService toastService
@inject PreloadService loading

<h3> Role Detail</h3>
<hr />

<div style="width:60%;">

    <EditForm Model="Role" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="row mb-3">
            <label for="inputCode" class="col-sm-2 col-form-label">Code</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="empcode" @bind-Value="@Role.Code" disabled=@ReadOnlyMode />
                <ValidationMessage For="@(() => Role.Code)" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputName" class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="empname" @bind-Value="@Role.Name" disabled=@ReadOnlyMode />
                <ValidationMessage For="@(() => Role.Name)" />
            </div>
        </div>

        <a class="btn btn-danger" tabindex="-1" role="button" aria-disabled="true" href="Roles">Back To Role List</a>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

        @if (ReadOnlyMode == false)
        {
            <Button @ref="btnSave" Color="ButtonColor.Success" Outline="true" Size="Size.Medium" @onclick="SubmitForm">
                <Icon Name="IconName.Activity"></Icon>
                @(RoleId > 0 ? "Update" : "Save")
            </Button>
        }
    </EditForm>
</div>

@code {
    [Parameter] public int RoleId { get; set; }
    public Role Role { get; set; } = new();
    public bool ReadOnlyMode { get; set; } = false;

    public EventCallback OnValidSubmit { get; set; }
    private Button btnSave;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Role = await GetRole(RoleId);
    }

    private async Task<Role> GetRole(int RoleId)
    {
        var url = $"/api/Role/{RoleId}";

        var result = await Http.GetFromJsonAsync<Response<Role>>(url);
        return result?.Data ?? new();
    }

    private async Task<int> SubmitForm()
    {
        btnSave?.ShowLoading("Loading...");

        if (RoleId > 0)
        {
            return await UpdateRole();
        }
        else
        {
            return await CreateRole();
        }

    }

    private async Task<int> UpdateRole()
    {
        btnSave?.ShowLoading("Loading...");
        var rss = -1;
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Role/{RoleId}", Role);
            var rs = await response.Content.ReadFromJsonAsync<Response<int>>();
            if (!rs.Succeeded)
            {
                foreach (var error in rs.Errors)
                {
                    toastService.Notify(new()
                        {
                            Message = $"Update Role is failed: {error.Message}",
                            Type = ToastType.Danger,
                            Title = "Update Role failed",
                            HelpText = $"{DateTime.Now}",
                        });
                }
            }
            else
            {
                toastService.Notify(new()
                    {
                        Message = "Update Role is successful",
                        Type = ToastType.Success,
                        Title = "Update Role success",
                        HelpText = $"{DateTime.Now}",
                    });
                rss = rs.Data;
            }

        }
        catch (Exception ex)
        {
            toastService.Notify(new()
                {
                    Message = $"Update Role is failed: Error: {ex.Message}",
                    Type = ToastType.Danger,
                    Title = "Update Role failed",
                    HelpText = $"{DateTime.Now}",
                });
        }
        btnSave?.HideLoading();
        return rss;
    }

    private async Task<int> CreateRole()
    {
        btnSave?.ShowLoading("Loading...");
        var rss = -1;
        try
        {
            var response = await Http.PostAsJsonAsync("api/Role", Role);
            var rs = await response.Content.ReadFromJsonAsync<Response<int>>();

            if (!rs.Succeeded)
            {
                foreach (var error in rs.Errors)
                {
                    toastService.Notify(new()
                        {
                            Message = $"Create Role is failed: {error.Message}",
                            Type = ToastType.Danger,
                            Title = "Create Role failed",
                            HelpText = $"{DateTime.Now}",
                        });
                }
            }
            else
            {
                toastService.Notify(new()
                    {
                        Message = "Create Role is successful",
                        Type = ToastType.Success,
                        Title = "Create Role success",
                        HelpText = $"{DateTime.Now}",
                    });
                rss = rs.Data;
            }

        }
        catch (Exception ex)
        {
            toastService.Notify(new()
                {
                    Message = $"Create Role is failed: Error: {ex.Message}",
                    Type = ToastType.Danger,
                    Title = "Create Role failed",
                    HelpText = $"{DateTime.Now}",
                });
        }
        btnSave?.HideLoading();
        return rss;
    }
}