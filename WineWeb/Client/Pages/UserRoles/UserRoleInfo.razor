@page "/UserRole/detail"
@page "/UserRole/detail/{UserId:int}"
@using System.Net.Http.Json;
@using WineWeb.Shared.Entities;
@using WineWeb.Shared.Models.Roles;
@using WineWeb.Shared.Models.UserRoles;
@using WineWeb.Shared.Models.Userss;
@inject HttpClient Http
@inject ToastService toastService
@inject PreloadService loading

<h3> UserRole Detail</h3>
<hr />

<div style="width:60%;">

    <EditForm Model="UserRole" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="row mb-3">
            <label for="inputCode" class="col-sm-2 col-form-label">Code</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="code" @bind-Value="@UserRole.Code" disabled=@ReadOnlyMode />
                <ValidationMessage For="@(() => UserRole.Code)" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputName" class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="name" @bind-Value="@UserRole.Name" disabled=@ReadOnlyMode />
                <ValidationMessage For="@(() => UserRole.Name)" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="row mb-3">
                <label for="inputName" class="col-sm-2 col-form-label">Username</label>
                <div class="col-sm-10">
                    <AutoComplete @bind-Value="@username" name="username"
                                  TItem="UsersModel"
                                  DataProvider="HandleInput"
                                  PropertyName="Username"
                                  Placeholder="Search user..."
                                  OnChanged="(UsersModel usersModel) => SelectUser(usersModel)" />
                    <input type="hidden" value="@UserId" name="usersId" />
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="row mb-3">
                <label for="inputName" class="col-sm-2 col-form-label">Role</label>
                <div class="col-sm-10">
                    @{
                        if (UserRole.RoleModels?.Any() ?? false)
                        {
                            foreach (var role in UserRole.RoleModels)
                            {
                                <input type="radio" name="roles" autocomplete="off"
                                       checked="@(UserRole.RoleModels.Contains(role))"
                                @onchange="()=>SelectRoles(role)"> @role.Code
                                <input type="hidden" value="@role.Id" name="roleIds" />
                            }
                        }
                        else
                        {
                            foreach (var role in roles)
                            {
                                <input type="radio" name="roles" autocomplete="off"
                                       checked="@(UserRole.RoleModels.Contains(role))"
                                @onchange="()=>SelectRoles(role)"> @role.Code
                                <input type="hidden" value="@role.Id" name="roleIds" />
                            }
                        }
                    }
                </div>
            </div>
        </div>
        <a class="btn btn-danger" tabindex="-1" UserRole="button" aria-disabled="true" href="UserRoles">Back To UserRole List</a>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

        @if (ReadOnlyMode == false)
        {
            <Button @ref="btnSave" Color="ButtonColor.Success" Outline="true" Size="Size.Medium" @onclick="SubmitForm">
                <Icon Name="IconName.Activity"></Icon>
                @(UserId > 0 ? "Update" : "Save")
            </Button>
        }
    </EditForm>
</div>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public List<int> RoleIds { get; set; } = new();
    [Parameter] public UserRoleModel UserRole { get; set; } = new();
    public bool ReadOnlyMode { get; set; } = false;

    public EventCallback OnValidSubmit { get; set; }
    private Button btnSave;

    public List<UsersModel> userss { get; set; } = new();
    public List<RoleModel> roles { get; set; } = new();
    string? username;
    string? filter;

    protected override async Task OnInitializedAsync()
    {
        loading.Show(SpinnerColor.Dark);
        await base.OnInitializedAsync();
        await FetchRoles();
        UserRole = await GetUserRole(UserId);
        UserRole.UsersId = UserId;
        loading.Hide();
    }

    private async Task FetchRoles()
    {
        var url = "/api/Role";

        url = $"{url}?PageSize=-1&PageNumber=1";

        var result = await Http.GetFromJsonAsync<Response<List<RoleModel>>>(url);
        roles = result?.Data;
    }

    private void SelectRoles(RoleModel role)
    {
        if (UserRole.RoleModels.Contains(role))
        {
            UserRole.RoleModels.Remove(role);
            RoleIds.Remove(role.Id);
        }
        else
        {
            UserRole.RoleModels.Add(role);
            RoleIds.Add(role.Id);
        }
    }

    private async Task<AutoCompleteDataProviderResult<UsersModel>> HandleInput(AutoCompleteDataProviderRequest<UsersModel> request)
    {
        filter = request.Filter.Value;
        if (filter?.Length > 2)
        {
            var rs = await Http.GetFromJsonAsync<Response<List<UsersModel>>>($"/api/Users?Username={filter}");
            userss = rs?.Data;
        }
        return await Task.FromResult(new AutoCompleteDataProviderResult<UsersModel> { Data = userss, TotalCount = userss.Count() });
    }


    private void SelectUser(UsersModel usersModel)
    {
        UserRole.UsersModel = usersModel;
        UserId = usersModel.Id;
        userss = null!;
    }

    private async Task<UserRoleModel> GetUserRole(int userId)
    {
        var url = $"/api/UserRole/ByUserId?userId={userId}";

        var result = await Http.GetFromJsonAsync<Response<UserRoleModel>>(url);
        return result?.Data ?? new() { UsersModel = new() { Username = string.Empty }, RoleModels = new List<RoleModel>() };
    }

    private async Task<int> SubmitForm()
    {
        btnSave?.ShowLoading("Loading...");

        if (UserId > 0)
        {
            return await UpdateUserRole();
        }
        else
        {
            return await CreateUserRole();
        }

    }

    private async Task<int> UpdateUserRole()
    {
        btnSave?.ShowLoading("Loading...");
        var rss = -1;
        try
        {
            var response = await Http.PutAsJsonAsync($"api/UserRole/{UserId}", UserRole);
            var rs = await response.Content.ReadFromJsonAsync<Response<int>>();
            if (!rs.Succeeded)
            {
                foreach (var error in rs.Errors)
                {
                    toastService.Notify(new()
                        {
                            Message = $"Update UserRole is failed: {error.Message}",
                            Type = ToastType.Danger,
                            Title = "Update UserRole failed",
                            HelpText = $"{DateTime.Now}",
                        });
                }
            }
            else
            {
                toastService.Notify(new()
                    {
                        Message = "Update UserRole is successful",
                        Type = ToastType.Success,
                        Title = "Update UserRole success",
                        HelpText = $"{DateTime.Now}",
                    });
                rss = rs.Data;
            }

        }
        catch (Exception ex)
        {
            toastService.Notify(new()
                {
                    Message = $"Update UserRole is failed: Error: {ex.Message}",
                    Type = ToastType.Danger,
                    Title = "Update UserRole failed",
                    HelpText = $"{DateTime.Now}",
                });
        }
        btnSave?.HideLoading();
        return rss;
    }

    private async Task<int> CreateUserRole()
    {
        btnSave?.ShowLoading("Loading...");
        var rss = -1;
        try
        {
            var response = await Http.PostAsJsonAsync("api/UserRole", UserRole);
            var rs = await response.Content.ReadFromJsonAsync<Response<int>>();

            if (!rs.Succeeded)
            {
                foreach (var error in rs.Errors)
                {
                    toastService.Notify(new()
                        {
                            Message = $"Create UserRole is failed: {error.Message}",
                            Type = ToastType.Danger,
                            Title = "Create UserRole failed",
                            HelpText = $"{DateTime.Now}",
                        });
                }
            }
            else
            {
                toastService.Notify(new()
                    {
                        Message = "Create UserRole is successful",
                        Type = ToastType.Success,
                        Title = "Create UserRole success",
                        HelpText = $"{DateTime.Now}",
                    });
                rss = rs.Data;
            }

        }
        catch (Exception ex)
        {
            toastService.Notify(new()
                {
                    Message = $"Create UserRole is failed: Error: {ex.Message}",
                    Type = ToastType.Danger,
                    Title = "Create UserRole failed",
                    HelpText = $"{DateTime.Now}",
                });
        }
        btnSave?.HideLoading();
        return rss;
    }
}